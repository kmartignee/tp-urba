name: 'TP Urba SI'

on:
  push:
    branches: [ main ]

jobs:
  checkov:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Checkov
        run: pip install checkov

      - name: Run Checkov on Terraform code
        working-directory: ./terraform
        run: checkov
  
  terraform:
    runs-on: ubuntu-latest
    outputs:
      frontend_ip: ${{ steps.terraform-output.outputs.frontend_ip }}
      backend_ip: ${{ steps.terraform-output.outputs.backend_ip }}
      database_ip: ${{ steps.terraform-output.outputs.database_ip }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configuration AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3

      - name: Installer Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
            
      - name: Initialisation Terraform
        working-directory: ./terraform
        run: terraform init

      - name: Plan Terraform
        working-directory: ./terraform
        run: terraform plan -var="db_root_password=${{ secrets.DB_ROOT_PASSWORD }}" -var="db_password=${{ secrets.DB_PASSWORD }}"

      - name: Appliquer Terraform
        working-directory: ./terraform
        run: terraform apply -auto-approve -var="db_root_password=${{ secrets.DB_ROOT_PASSWORD }}" -var="db_password=${{ secrets.DB_PASSWORD }}"

  ansible:
    needs: terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Installer Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible

      - name: Configurer la clé SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY_CI }}" > ~/.ssh/ma-cle-ssh
          chmod 600 ~/.ssh/ma-cle-ssh
          echo -e "Host *\n  StrictHostKeyChecking no\n" > ~/.ssh/config

      - name: Créer l'inventaire Ansible dynamique
        run: |
          cat > ./ansible/inventory.ini << EOF
          [frontend]
          ${{ needs.terraform.outputs.frontend_ip }} ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/ma-cle-ssh

          [backend]
          ${{ needs.terraform.outputs.backend_ip }} ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/ma-cle-ssh

          [database]
          ${{ needs.terraform.outputs.database_ip }} ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/ma-cle-ssh

          [all:vars]
          db_name=appdb
          db_user=appuser
          db_password=${{ secrets.DB_PASSWORD }}
          db_root_password=${{ secrets.DB_ROOT_PASSWORD }}
          EOF

      - name: Exécuter le playbook pour le frontend
        working-directory: ./ansible
        run: ansible-playbook -i inventory.ini frontend-playbook.yml

      - name: Exécuter le playbook pour le backend
        working-directory: ./ansible
        run: ansible-playbook -i inventory.ini backend-playbook.yml

      - name: Exécuter le playbook pour la base de données
        working-directory: ./ansible
        run: ansible-playbook -i inventory.ini database-playbook.yml